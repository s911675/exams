1.2
내레이션 : 
이번 시간에는 SW 위기, SW 개발 패러다임의 변화 그리고 객체 지향 패러다임의 등장에 대해 배워 보도록 하겠습니다.
그럼 본격적인 학습에 들어가기 전에 이번 시간에 다룰 주요 내용을 간단히 살펴볼까요?

SW 위기의 근본적인 원인은 HW와 SW의 발전 속도 차이에서 비롯되었다고 볼 수 있습니다. 

SW 개발 패러다임은 1950년대의 1세대부터 현재의 6세대까지 변화하였으며, 변화 과정에서 SW의 역할은 점점
확대되었습니다.
	1세대(1950년대 ~ 1960년대 중반) 특정 목적의 소프트웨어
	2세대(1960년대 중반 ~ 1970년대 초반) SW 의 상품화
	3세대(1990년대 중반 ~ 2000년대 중반) 다양한 응용분야의 범용 SW
	4세대(1980년대 후반 ~ 1990년대 후반) 객체 지향기술의 발전
	5세대(1990년대 중반 ~ 2000년대 중반) SW 컴포넌트, 웹 서비스
	6세대(2000년대 중반 ~ 현재) Agile 개발, SOA 기반 시스템 통합.

객체 지향 패러다임은 1967년에 시작되었으며, 객체 지향 언어는 SIMULA 언어에서 시작하여 Java에 이르기까지
30년간에 걸쳐 발전되어 왔습니다. 
	1. 1967 SIMULA
	2. 1970 SmallTack
	3. 1980 C++
	4. 1990 java
	
1.3 학습목표

1.4 핵심 키워드

1.5 SW 위기
내레이션 : 
1960년대 HW의 비약적인 발전이 이루어지면서 컴퓨터의 사용 욕구는 사회 전역으로 증대되었고, SW에 대한 요구도
양적으로 증대되었습니다. 하지만 당시의 개발방식은 소규모의 SW 개발에 적합한 것이었는데요.
즉, SW 위기의 가장 근본적인 원인은 HW와 SW의 발전 속도의 차이였습니다.

이번 시간에는 이러한 SW의 위기에 대해 살펴보도록 하겠습니다. 

먼저 어떻게 SW의 위기가 일어나게 되었는지 그 배경에 대해 알아보겠습니다.
1946년, 최초의 컴퓨터, ENIAC이 발명된 시대에는 컴퓨터를 군사적 목적으로만 사용했으며, 인류 문명에서 컴퓨터가
중요한 역할을 맡을 것임을 예측하는 사람이 많지 않았는데요.
불과 20년 여 년이 지난 1960년 대에는 초기와 비교되지 않을 만큼 많은 분야에서 컴퓨터가 응용되었습니다. 
제 3세대 컴퓨터가 출현하게 되면서 HW의 비약적인 발전이 이루어지고, 그에 따라 HW의 생산성도 높아져 컴퓨터의
가격은 하락하게 되었습니다. 또한 컴퓨터 사용 욕구는 사회 전역으로 증대되었으며, SW에 대한 요구도 양적으로
증대되면서 SW의 규모 역시 단기간에 커지게 되었죠. 하지만 당시 SW 개발방식은 소규모의 SW 개발에 적합한
것이었습니다.  
즉, SW 위기의 가장 근본적인 원인은 HW와 SW의 발전 속도의 차이에서 비롯되었다고 볼 수 있습니다.


1.6 SW 위기의 현상.
내레이션 :
그렇다면 이러한 SW와 HW의 차이로 어떤 현상이 발생되었을까요?
1960년대 중반 이후 진행된 SW 개발 프로젝트의 대부분은 개발이 지연되어 약속된 인도시점을 지키지 못하고 중도에
중단되거나 취소되었습니다. 이에 SW의 개발비용과 기간은 계속해서 늘어나게 되었으며, 개발이 완료되어 인도된 SW의
경우에도 많은 결함 때문에 신뢰도가 낮아지게 되었죠. 
이러한 SW의 위기는 많은 노력에도 불구하고 오늘날까지도 재현되고 있는데요.
1995년, 미국의 정부기관과 민간에서 발주된 전체 SW 개발 프로젝트에 대한 조사 결과, 예정된 예산인 52.7%의 거의
두 배 가량인 89%를 지출했다고 합니다. 또한 전체 프로젝트의 31%가 취소되었으며, 91%의 프로젝트가 개발 기간 내에
종료되지 못하는 등의 SW위기 현상이 지속되고 있음을 알 수 있습니다.


1.7 SW 개발 패러다임의 변화
내레이션 : 
SW의 개발은 컴퓨터가 발명된 이후로 세대별로 변화되었으며, 변화되는 과정에서 SW 의 역할은 점점 확대되었습니다.

이번 시간에는 이러한 SW 개발 패러다임의 변화에 대해 살펴보도록 하겠습니다.

SW 개발 패러다임의 변화에 대해 알아보기 전에 먼저, 패러다임이란 무엇인지 알아볼까요?
패러다임의 사전적 풀이는‘예, 모범, 전형적인 패턴’으로, 이는 ‘대표성’을 의미합니다.
또한 패러다임은 시간개념을 전제로 하며, 시간이 흘러감에 따라 서서히 변화하는데요.
변화는 감지하기가 어려워 예전과는 다른 형식이 정착되고도 한참이 흘러야 새로운 패러다임이 도래했음을 알 수
있습니다.


1.8 SW 패러다임의 변화 과정
나레이션 : 
그럼 SW는 언제 발명되었을까요? 
SW는 최초의  컴퓨터인 ENIAC 이후 1949년에 프로그램 내장 방식의 컴퓨터인 EDSAC이 발명되면서 탄생되었는데요.
이후 SW 개발방식은 오늘날에 이르기까지 프로그래밍 언어의 특성에 기반한 많은 변화를 거쳤습니다.
특히 1960년대 후반에 제시된’ SW 위기’는 보다 빨리, 보다 안정된 형태로의 SW 개발방식의 변화를 요구하였습니다.

여기서 잠깐!
SW는 1949년에 프로그램 내장 방식의 컴퓨터인 ENIAC이 발명되면서 탄생되었다. 
위 문장이 맞으면 O, 틀리면 X를 클릭하세요.

이번에는 SW의 세대별 변화과정에 대해 살펴보겠습니다.
세대는 제 1세대부터 제 5세대까지로 구분되는데요.
세대별 특징에 대한 내용을 잘 읽고 보기에서 맞는 것을 골라 빈 칸에 끌어다 놓으세요.
모두 맞게 끌어다 놓으셨나요? 이러한 변화 과정을 통해 우리는 SW의 역할이 점점 확대되고 있음을 확인할 수 있습니다.

보충 버튼을 클릭하여 주요 용어에 대한 설명도 확인해 보세요.

1.9 SW 개발 방식의 변화.
내레이션 :
앞서 살펴본 바와 같이 SW 역할이 점차 증대되는 방향으로 변화함에 따라, SW의 개발방식도 계속해서 발전해 왔는데요. 

SW 개발방식의 이 같은 변화는 HW의 눈부신 발전에 따른 외적인 측면에서도 찾을 수 있지만,
그것보다는 SW의 개발 생산성과 품질이라는 두 가지 내부적 문제를 해결하기 위해 노력한 결과라고 할 수 있습니다.


1.10 sw 개발 방식의 변화.
내레이션 :
그럼 SW 개발 방식이 어떻게 발전되었는지 살펴볼까요?
SW 개발방식은 다음의 절차중심적 프로그래밍 방식에서 모듈화 프로그래밍 방식, 자료중심적 프로그래밍 방식,
객체 지향 프로그래밍 방식의 순서로 발전해왔는데요. 

먼저 절차중심적 프로그래밍 방식에 대해 살펴보도록 하겠습니다.
절차중심적 프로그래밍 방식의 배경과 내용에 대해 자세히 살펴본 후 클릭 버튼을 클릭해 보세요.

절차중심적 프로그래밍 방식은 초기의 SW 개발방식으로, 효율만을 중시하여 SW를 암호와 같이 이해하기 어렵게
만들었습니다.
즉, 프로그램 내부의 처리절차는 이해하기가 어려워 유지보수성은 최악이었으며, 새로 착수하는 프로그램은 이전의
프로그램을 참조할 수가 없었는데요. 결국 이 방식은 HW가 발전하고 Data가 중요해지면서 효용이 없어지게 되었습니다.
절차중심적 프로그래밍 방식은 1970년대에 모듈화 프로그래밍 방식으로 변화되었습니다.

모듈화 프로그래밍 방식으로 발전하게 된 배경과 내용을 살펴본 후 클릭버튼을 클릭해 보세요. 
모듈화 프로그래밍에서는 독립적인 모듈의 개발이 가능해짐에 따라 생산성이 향상되었으며, 공통적인 성격의 모듈은
재사용이 가능하게 되었습니다. 또한 SW 결함의 관리 및 유지보수도 용이하게 되었는데요.
하지만 여전히 이전 방식이었던 절차중심적 방식이 유지되었습니다.
1980년대에는 자료중심적 프로그래밍 방식으로 변화되었습니다.

변화하게 된 배경과 내용을 살펴본 후 클릭버튼을 클릭해 보세요. 
자료중심적 프로그래밍 방식은 데이터의 변경 가능성이 적어 프로그램이 안정적이며, 프로그램 자체의 결함이 줄어듦에
따라 기업용의 대량 데이터 처리요구를 만족시킬 수 있었습니다.
마지막으로 2000년대 중반에는 객체 지향 프로그래밍 방식으로 변화되었는데요.

변화하게 된 배경과 내용을 살펴본 후 클릭버튼을 클릭해 보세요. 
객체 지향 프로그래밍 방식은 현재 사용되고 있는 방식으로, 코드의 재사용이 용이해졌으며, 객체의 다양한 특성으로
인해 프로그램의 구조가 고도화되었는데요. 이로써 객체지향 설계방식은 현실의 상황을 충실히 반영할 수 있었습니다.

여기서 잠깐!
다음 중 처리절차보다 데이터를 논리적으로 잘 조직화하는 것이 중요한 SW 개발 방식은 무엇일까요?

아래 보기 중에서 맞는 답을 골라 클릭하세요


1.11
내레이션 : 
객체 지향의 개념은 1960년 말 소개될 당시에는 주목 받는 기술이 아니었으나, 1980년대 중반 이후에는 SW의 본류를
이루는 패러다임으로 기존의 방식들을 완전히 대체하게 되었습니다.

이번 시간에는 이러한 객체 지향 패러다임의 등장에 대해 살펴보도록 하겠습니다.

SW는 복잡성으로 인해 개발과 유지보수의 비용이 증가하게 되어 위기를 맞게 되었는데요.
SW 위기를 극복하기 위해 찾아낸 방안을 몇 가지로 정리해 보면 다음과 같습니다.
SW 개발과 유지보수에 SW 방법론과 툴을 사용하여 효율을 높이고, 기존의 SW를 재사용하여 생산성을 향상시킬 수 있는
방안이 있습니다. 또한 현실의 상황을 더욱 잘 반영하는 분석과 설계, 그리고 프로그래밍 체계인 객체 지향 기술을
활용하는 방안이 있습니다. 
이 세 가지 방안 모두 SW의 생산성과 신뢰성을 높임으로써 SW위기를 극복하는데 일조하며, 각 분야에서 발전을 거듭하고
있는데요. 이 중심에는 바로 객체 지향 패러다임이 있습니다. 
객체 지향 패러다임의 장점과 효과가 입증되면서 어느 한 분야의 기술에 국한되지 않고 프로그래밍뿐만 아니라 방법론,
Data Base, OS등으로 확산, 적용되고 있습니다.


1.12
내레이션 :
그렇다면 이러한 객체 지향 패러다임은 언제 시작되었을까요? 

프로그래밍 언어 관점에서 객체 지향패러다임은 1967년 SIMULA 언어에서 시작하여 순수 객체로 객체 지향 개념을
정립시키는데 큰 공헌을 한 Smalltalk  언어, 1980년대 중반부터 산업계 SW 개발에 본격적으로 활용되어온 C++,
1990년대 중반에 소개되어 인터넷 기반 객체 지향 SW 개발에 가장 널리 사용되고 있는 Java에 이르기까지 그 역사가
전산학에 버금가는 30년간에 걸쳐 발전되어 왔습니다.

여기서 C++과 같은 객체 지향 언어는 객체 지향 프로그래밍뿐 아니라 절차중심적 프로그래밍 방식도 지원하는
혼성언어이며 Smalltalk, Java 등은 객체 지향 프로그래밍만 가능케 하는 순수 객체 지향 언어입니다. 

산업계에서는 90년대 말에 접어들면서 Java를 중심으로 한 순수 객체 지향 언어들을 더욱 선호하는 경향이
두드러졌으며, 이와 같은 추세는 계속되어 안드로이드와 같은 모바일 및 임베디드 시스템까지도 그 영역을 지속적으로
확대해 가고 있습니다. 이는 객체 지향 프로그래밍이 사람이 이해하기 가장 쉽고, 현실 세계를 가장 잘 반영하기
때문이며, 단일 패러다임의 프로그래밍이 개발 생산성을 높여주며, 혼성 패러다임방식의 프로그램 설계 시 중복된
모델로 인한 복잡성을 해결하기 때문입니다.

절차중심적 -> 모듈화 -> 자료중심적 -> 객체지향